from datetime import datetime
import psycopg2
from psycopg2.extras import DictCursor
from telebot import types

from conf_bd import host, user, password, db_name


def adding_alerts_db():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
        connection = psycopg2.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        )
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î –∞–≤—Ç–æ–º–∞—Ç–æ–º
        connection.autocommit = True
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT version();"
            )

            print(f'Server version: {cursor.fetchone()}')

        with connection.cursor() as cursor:
            cursor.execute(
                """CREATE TABLE IF NOT EXISTS alerts(
                    alert_id serial PRIMARY KEY, 
                    user_id INT REFERENCES users(id) ON DELETE CASCADE,
                    symbol VARCHAR(50),
                    target_price numeric(20, 10),
                    direction VARCHAR(10) NOT NULL,
                    alerts_date TIMESTAMP,
                    number_repetitions INT DEFAULT 1);"""
            )
            print("[INFO] Table created successfully")

    except Exception as ex:
        print("[INFO] Error while working:", ex)

    finally:
        connection.close()
        print("[INFO] PostgresSQL connection closed")


def set_notification(bot):
    @bot.message_handler(commands=['alert'])
    def alerts(message):
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
            connection = psycopg2.connect(
                host=host,
                user=user,
                password=password,
                database=db_name
            )

            connection.autocommit = True
            a = message.from_user.id
            with connection.cursor() as cursor:
                cursor.execute("SELECT language FROM users WHERE id_user = %s", (str(a),))
                language = cursor.fetchone()[0]

            command, *args = message.text.split()
            if len(args) == 0:
                if language == 'ru':
                    bot.send_message(message.chat.id,
                                     "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≤–∏–¥–µ /alert [–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞] [—Ü–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è]")
                elif language == 'en':
                    bot.send_message(message.chat.id, "Set alerts as /alert [cryptocurrency] [alert trigger price]")

            with connection.cursor() as cursor:
                cursor.execute("SELECT id FROM users WHERE id_user = %s", (str(a),))
                table_id_user = cursor.fetchone()[0]

            with connection.cursor() as cursor:
                cursor.execute("SELECT price FROM cryptocurrencies WHERE symbol = %s", (args[0],))
                current_price = cursor.fetchone()[0]

            if current_price > float(args[1]):
                direction = 'down'
            else:
                direction = 'up'

            print(args[0], args[1])

            with connection.cursor() as cursor:
                cursor.execute(
                    """INSERT INTO alerts (user_id, symbol, target_price, direction, alerts_date, number_repetitions) 
                    VALUES (%s, %s, %s, %s, %s, %s) RETURNING alert_id;""",
                    (str(table_id_user), args[0], args[1], direction, datetime.now(), str(1))
                )
                alert_id = cursor.fetchone()[0]
                print("[INFO] Alerts inserted successfully")

            # –û–±–Ω–æ–≤–ª—è–µ–º last_alert_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with connection.cursor() as cursor:
                cursor.execute("""
                       UPDATE users
                       SET last_alert_id = %s
                       WHERE id_user = %s;
                   """, (alert_id, str(message.from_user.id)))

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ (Markup)
            markup = types.InlineKeyboardMarkup()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å callback_data
            button_1 = types.InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ', callback_data='configure_alerts')
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–∞–∫–µ—Ç
            markup.row(button_1)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
            bot.reply_to(
                message,
                f"–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–∞ –º–æ–Ω–µ—Ç–µ {args[0]}\n"
                f"–¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è {args[1]}\n"
                "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π \n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ",
                reply_markup=markup
            )

        except Exception as e:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.")
            print(f"Error: {e}")
        finally:
            connection.close()
            print("[INFO] PostgresSQL connection closed")


def delete_expired_alerts():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = psycopg2.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ —Å alert_count = 0
        with connection.cursor() as cursor:
            cursor.execute("DELETE FROM alerts WHERE number_repetitions = 0;")
            connection.commit()

        print("[INFO] Alerts with number_repetitions = 0 have been deleted.")

    except Exception as e:
        print(f"Error: {e}")

    finally:
        connection.close()
        print("[INFO] PostgreSQL connection closed")


def check_alerts(bot):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    connection = psycopg2.connect(
        host=host,
        user=user,
        password=password,
        database=db_name
    )
    connection.autocommit = True

    try:
        with connection.cursor(cursor_factory=DictCursor) as cursor:
            cursor.execute("""
                SELECT a.alert_id, a.symbol, a.target_price, a.direction, a.user_id, a.number_repetitions, u.chat_id, p.price, p.last_updated
                FROM alerts a
                JOIN cryptocurrencies p ON a.symbol = p.symbol
                JOIN users u ON a.user_id = u.id
                WHERE (a.direction = 'down' AND p.price < a.target_price)
                OR (a.direction = 'up' AND p.price > a.target_price);
            """)
            triggered_alerts = cursor.fetchall()

        for alert in triggered_alerts:
            chat_id = alert['chat_id']
            symbol = alert['symbol']
            target_price = alert['target_price']
            current_price = alert['price']
            direction = "–≤—ã—à–µ" if alert['direction'] == "up" else "–Ω–∏–∂–µ"

            if alert['number_repetitions'] > 0:
                bot.send_message(
                    int(chat_id),
                    f"üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ!</b>\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"ü™ô <b>–ú–æ–Ω–µ—Ç–∞:</b> {symbol}\n"
                    f"üíµ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${current_price}\n"
                    f"üìâ <b>–£—Å–ª–æ–≤–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:</b> –¶–µ–Ω–∞ {direction} ${target_price}\n"
                    f"‚è∞ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {alert['last_updated']}\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üì≤ <i>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é</i>",
                    parse_mode="HTML"
                )

                with connection.cursor() as cursor:
                    cursor.execute("""
                        UPDATE alerts
                        SET number_repetitions = %s
                        WHERE alert_id = %s
                    """, (alert['number_repetitions'] - 1, alert['alert_id']))

        delete_expired_alerts()

    finally:
        connection.close()
